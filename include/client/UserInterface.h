/**
@file UserInterface.h
@brief Manages the user interface.
*/
#pragma once

#include <string>
#include <vector>
#include <memory>

#include <SFML/Window/Event.hpp>

#include "Vector2D.h"
#include "GameState.h"

class Scene;
class Shader;
class FontRenderer;
class Shape;
struct Button;
struct Text;

/*! \class UserInterface
	\brief Manages the user interface.
*/

class UserInterface {
private:
	/*!
		* @brief The Scene class can access all of the UserInterface properties.
		* @relates Scene
	*/
	friend Scene;

	std::vector<std::shared_ptr<Button>> m_Buttons;	//!< A vector of the buttons on the user interface.
	std::vector<std::shared_ptr<Shape>> m_Shapes;	//!< A vector of the shapes on the user interface.
	std::vector<std::shared_ptr<Text>> m_Text;	//!< A vector of the text on the user interface.
	Vector2Df m_ScreenSize;	//!< The size of the screen.
	float m_Time = 0.0f;	//!< The current time.
	std::shared_ptr<FontRenderer> m_FontRenderer;	//!< A pointer to the font renderer.
	Shader *m_Shader;	//!< A pointer used by the buttons/shapes, to render them.

	/*!
		\brief Loads the user interface layout.
		\param p_File The json file to read the user interface data from.
		\return Returns true, if the user interface data was successfully read, otherwise false.
	*/
	bool LoadUserInterfaceLayout(const std::string &p_File);

	/*!
		\brief Gets a game state, when passed the name of it
		\param p_GameStateName The name of the game state.
		\return Returns a game state, if it can find one with the name passed in, otherwise it returns the NOT_AVAILABLE state.
	*/
	GameState GetGameStateFromName(const std::string &p_GameStateName);

public:
	/*!
		\brief Constructor.
		\param p_ScreenSize The size of the screen.
		\param p_File The relative file path to the user interface data.
	*/
	UserInterface(const Vector2Df &p_ScreenSize, const std::string &p_File);
	/*!
		\brief Destructor.
	*/
	~UserInterface() = default;

	/*!
		\brief Handles the input, generated by the player.
		\param p_Event The event to handle.
		\param p_CurrentGameState The state of the game, currently.
		\return Returns the state of the game.
	*/
	GameState HandleInput(sf::Event &p_Event, const GameState &p_CurrentGameState);
	/*!
		\brief Updates the user interface properties.
		\param p_DeltaTime The delta time between the current frame and the previous frame.
		\return Nothing.
	*/
	void Update(float p_DeltaTime);
	/*!
		\brief Renders the user interface.
		\return Nothing.
	*/
	void Render();

	/*!
		\brief Gets the screen size.
		\return Returns the screen size.
	*/
	const Vector2Df &GetScreenSize() const {
		return m_ScreenSize;
	}
	/*!
		\brief Sets the user interface's screen size.
		\param p_ScreenSize The screen new size.
		\return Nothing.
	*/
	void SetScreenSize(const Vector2Df &p_ScreenSize) {
		m_ScreenSize = p_ScreenSize;
	}

	/*!
		\brief Gets the user interface time.
		\return Returns the user interface time.
	*/
	const float &Time() const {
		return m_Time;
	}
	/*!
		\brief Resets the user interface's timer.
		\return Nothing.
	*/
	void ResetTime() {
		m_Time = 0.0f;
	}

	/*!
		\brief Gets the user interface's buttons.
		\return Returns a vector of pointers, which point to the user interfaces' buttons.
	*/
	std::vector<std::shared_ptr<Button>> &GetButtons() {
		return m_Buttons;
	}
};