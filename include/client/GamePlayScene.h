/**
@file GamePlayScene.h
@brief Manages the gameplay properties.
*/
#pragma once

#include "Scene.h"

#include <string>
#include <vector>

#include "Client.h"
#include "Vector2D.h"

#define INVALID_SYMBOL_GUESS -1	//!< Value used to set a symbol guess as invalid.
#define ATTEMPT_DELAY 4.0f	//!< The delay between each symbol attempt.
#define MAX_NUMBER_OF_PARTICLES	500	//!< The maximum number of particles.

// Post Processing effect settings.
// Shake effect:
#define MIN_SHAKE_TIME_EFFECT_DURATION 3.25f	//!< The minimum duration the shake effect can last for.
#define MAX_SHAKE_TIME_EFFECT_DURATION 5.5f	//!< The maximum duration the shake effect can last for.
#define MIN_GAP_DURATION_BETWEEN_SHAKE_EFFECT (MAX_SHAKE_TIME_EFFECT_DURATION + 3.5f)	//!< The minimum duration between each activation of the shake effect.
#define MAX_GAP_DURATION_BETWEEN_SHAKE_EFFECT (MIN_GAP_DURATION_BETWEEN_SHAKE_EFFECT + 8.5f)	//!< The maximum duration between each activation of the shake effect.

// Other effect (inverted colours or edge kernel - chaos):
#define MIN_OTHER_EFFECT_TIME_DURATION 3.25f	//!< The minimum duration the other effect can last for.
#define MAX_OTHER_EFFECT_TIME_DURATION 5.5f	//!< The maximum duration the other effect can last for.
#define MIN_GAP_DURATION_BETWEEN_OTHER_EFFECT (MAX_OTHER_EFFECT_TIME_DURATION + 3.5f)	//!< The minimum duration between each activation of the other effect.
#define MAX_GAP_DURATION_BETWEEN_OTHER_EFFECT (MIN_GAP_DURATION_BETWEEN_OTHER_EFFECT + 8.5f)	//!< The maximum duration between each activation of the other effect.

class ParticleManager;

/*! \class GamePlayScene
	\brief Manages the gameplay properties.
*/

class GamePlayScene : public Scene {
private:
	Client m_Client;	//!< A client instance, used to communicate with the server.
	std::vector<float> m_EnemyScores;	//!< The scores of the other players.
	std::string m_PlayerEntityID = "PlayerCard";	//!< The name of the player's card entity.
	std::string m_DeckEntityID = "DeckCard";	//!< The name of the dekc's card entity.
	Vector2Df m_MousePosition;	//!< The mouse position, within the window.
	sf::Int32 m_PlayerSymbolIDGuess = INVALID_SYMBOL_GUESS;	//!< The symbol guessed, by the player.
	sf::Int32 m_RoundsWon = 0;	//!< The number of rounds the player has won.
	float m_Score = 0.0f;	//!< The score the player has accumulated, by winning rounds.
	float m_TimeOfLastAttempt = -ATTEMPT_DELAY;	//!< The last time the player guessed a symbol.
	float m_TimePassedSinceShakeEffectActivated = 0.0f;	//!< The time passed since the shake effect was activated.
	float m_ShakeEffectActivationGap = MIN_GAP_DURATION_BETWEEN_SHAKE_EFFECT;	//!< The time gap between each shake effect.
	float m_TimePassedSinceOtherEffectActivated = 0.0f;	//!< The time passed since the other effect was activated.
	float m_OtherEffectActivationGap = MIN_GAP_DURATION_BETWEEN_OTHER_EFFECT;	//!< The time gap between each other effect.
	std::shared_ptr<ParticleManager> m_ParticleManager;	//!< Pointer to a particle manager, which manages the particle system.
	bool m_CouldConnect = true;	//!< Manages the connection state between the server and the client.
	bool m_WaitingForMorePlayers = true;	//!< Keeps track of whether the lobby is waiting for more players, or not.

	/*!
		\brief Handles incoming score packets, from the server.
		\param p_Packet The packet to get the score from (received from the server).
		\return Nothing.
	*/
	void ReadScore(sf::Packet &p_Packet);

	/*!
		\brief Handles incoming packets, from the server.
		\param p_Packet The packet to handle (received from the server).
		\return Nothing.
	*/
	void HandlePacket(sf::Packet &p_Packet);
	/*!
		\brief Creates an entity, from a packet of data with values for the entity's components.
		\param p_EntityName The name of the entity, to create.
		\param p_Packet The packet that contains the entity's data.
		\param p_PositionOffset The offset position of the entity.
		\return Nothing.
	*/
	void CreateCardEntity(const std::string &p_EntityName, sf::Packet &p_Packet, const Vector2Df &p_PositionOffset = Vector2Df(0.0f, 0.0f));

public:
	/*!
		\brief Constructor.
		\param p_ScreenSize The size of the screen. 
		\param p_File The User interface file's relative path.
	*/
	GamePlayScene(const Vector2Df &p_ScreenSize, const std::string &p_File);
	~GamePlayScene();	//!< Destructor.

	/*!
		\brief Handles input events, generated by the player.
		\param p_Event The event generated by the player, to be handled.
		\return Nothing.
	*/
	virtual void HandleInputEvent(sf::Event &p_Event) override;

	/*!
		\brief Updates the game play scene.
		\param p_DeltaTime The delta time between the current frame and the previous.
		\return Nothing.
	*/
	virtual void Update(float p_DeltaTime) override;
	/*!
		\brief Renders the game play scene.
		\return Nothing.
	*/
	virtual void Render() override;

	/*!
		\brief Gets the player's score.
		\return Returns the player's score.
	*/
	float GetPlayerScore();

	/*!
		\brief Gets the amount of rounds won, by the player.
		\return Returns the number of rounds won, by the player.
	*/
	int GetRoundsWon();
};